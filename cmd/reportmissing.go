/*
Copyright Â© 2021 Sergio Soto <me@srgio.es>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strings"

	"github.com/spf13/cobra"

	"github.com/srgio-es/tcvolumeutils/model"
	converter "github.com/srgio-es/tcvolumeutils/parser"
	"github.com/srgio-es/tcvolumeutils/utils"
	out "github.com/srgio-es/tcvolumeutils/utils/output"
)

// reportmissingCmd represents the reportmissing command
var (
	reportmissingCmd = &cobra.Command{
		Use:   "reportmissing",
		Short: "Extracts missing OS files from review_volumes logs",
		Long: `This command extracts missing OS files info from the logs generated by the review_volumes command.

The information is processed and writed out to a XLXS file to improve readiness.
If the XLSX file specified contains data, the file is updated appending the new values.`,
		Run: processCommand,
	}

	logFolder string
	reportFile string
	output out.VerboseOutput

	collection map[string][]model.MissingFile
)
func init() {
	rootCmd.AddCommand(reportmissingCmd)

	reportmissingCmd.Flags().StringVarP(&logFolder, "logs-folder", "f", "", "Specifies the location of the logs to be processed")
	reportmissingCmd.MarkFlagDirname("logs-folder")
	reportmissingCmd.MarkFlagRequired("logs-folder")

	reportmissingCmd.Flags().StringVarP(&reportFile, "report", "r", "volumes-report.xlsx", `Specifies the path to the XLSX file to populate with the results.
If it doesn't not exist it will create a new one, otherwhise
it will append data to the passed one`)
}

func processCommand(cmd *cobra.Command, args []string) {
	verbose, _ := cmd.Parent().Flags().GetBool("verbose")
	output = out.VerboseOutput{Verbose: verbose}


	fmt.Println("processCommand init")
	fmt.Printf("Log Folder: %s\n", logFolder)
	fmt.Printf("Verbose: %#v\n", verbose)
	fmt.Printf("args: %v \n", args)
	fmt.Println("")

	allFiles, err := ioutil.ReadDir(logFolder)
	if err != nil {
		fmt.Println("ERROR: The specified logs directory does not exist")
		fmt.Println("")
		cmd.Usage()
		os.Exit(1)
	}

	var toProcess []os.FileInfo
	for _, file := range allFiles {
		if(!file.IsDir() && strings.HasSuffix(file.Name(), "txt")){
			toProcess = append(toProcess, file)
		}
	}

	output.Printf("%d review_volumes log files marked to process", len(toProcess))

	for _, file := range toProcess {
		output.Printf("Processed file: %s\n", file.Name())
		processFile(logFolder, file.Name())
	}

}

func processFile(location string, file string) {
	f, err := ioutil.ReadFile(logFolder + string(os.PathSeparator) + file)
	if err != nil {
		log.Fatal(err)
	}

	if !strings.Contains(string(f), "Error accessing volume") {

		var missingFiles []model.MissingFile

		lines := getLines(f)

		if(len(lines) > 0) {
			fmt.Printf("Volume %s has %d missing files\n", file, len(lines))
		} else {
			output.Printf("Volume %s has no missing files\n", file)
		}

		for _, line := range lines {
			output.Printf("Missing: %s\n", line)
			p := converter.MissingFileParser{Line: line, Volume: file[:len(file)-4]}
			missingFile := p.ParseLine(line)

			log.Printf("missingFile: %#v", missingFile)

			missingFiles = append(missingFiles, missingFile)
		}

	} else {
		output.Printf("File %s has errrors and cannot be processed", file)
	}


}

func getLines(raw []byte) []string {

	b := strings.Index(string(raw), "Files missing from the OS file that are referenced by Teamcenter:")

	if b > 0 {
		raw = raw[b:]
	}

	s := strings.Index(string(raw), "\n")
	e := strings.Index(string(raw), "--------------------------------------------------------------------------------")


	if s > 0 && e > 0{
		raw = raw[s:e]
	}

	return utils.RemoveLineEndingsFromSlice(utils.RemoveEmptyFromSlice(strings.Split(string(raw), "\n")))
}